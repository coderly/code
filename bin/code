#!/usr/bin/env ruby

$: << File.join(File.dirname(__FILE__), '..', 'lib') # while this is still in development

require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'code'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/code` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/code now"
  exit 64
end

require 'code/git'
require 'code/github_api'
require 'code/branch'
require 'code/file_list'
require 'code/system'

include GLI::App

program_desc 'The Coderly Toolbelt'

version Code::VERSION

desc 'Authorize with GitHub'
command :authorize, :login do |c|
  c.flag 'username', desc: 'GitHub username'
  c.flag 'password', desc: 'GitHub password'
  c.action do |global_options, options, args|
    username = options[:username]
    password = options[:password]

    Code::GitHubAPI.new.authorize(username: username, password: password)
  end
end

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Create a new feature branch'
arg_name 'The name of the feature'
command :start do |c|
  c.action do |global_options, options, args|
    feature_name = args.join('-')
    $git.start feature_name
  end
end

desc 'Upload your feature branch to GitHub'
command :publish, :pr do |c|
  c.switch [:master], desc: 'Make the pull request based off the master branch'
  c.action do |global_options, options, args|
    message = args.join(' ')

    base_branch = nil
    base_branch = Code::Branch.master if options[:master]
    current_branch = Code::Branch.current

    if (current_branch.has_pr?)
      Code::System.open_in_browser(current_branch.pull_request_url)
    else
      $git.publish(base: base_branch, message: message)
    end
  end
end

desc "Push your current branch"
command :push, :p do |c|
  c.action do |global_options, options, branch_name|
    $git.push
  end
end

desc "Marks the current branch's pr as awaiting review"
command :ready do |c|
  c.action do |global_options, options, args|
    Code::Branch.current.mark_prs_as_awaiting_review
  end
end

desc "Quickly create a pull request from your changes on development."
command :hotfix, :fix do |c|
  c.action do |global_options, options, args|
    hotfix_name = args.join('-')
    $git.hotfix hotfix_name
  end
end

desc 'Cleanup after a feature has been merged through GitHub'
command :finish do |c|
  c.action do |global_options, options, args|
    $git.finish
  end
end

desc 'Delete the branch you are working on and switch back to development'
command :cancel do |c|
  c.action do |global_options, options, args|
    $git.cancel
  end
end

desc 'Switch to a branch. You can use sub-commands.'
command :switch, :s do |c|
  c.action do |global_options, options, args|
    $git.switch(*args)
  end
end

desc 'Deploy to production'
command :production do |c|
  c.action do |global_options, options, args|
  end
end

desc 'List all the files in the current directory with the patterns'
command :files do |c|
  c.action do |global_options, options, patterns|
    puts FileList.new.matching(patterns)
  end
end

desc 'Clean up by deleting old branches'
command :clean do |c|
  c.action do |global_options, options, patterns|
    puts "Deleting local merged branches..."
    Code::Branch.merged.each do |branch|
      branch.delete!
    end
    puts "Done!"

    puts "Pruning remote branches that don't exist anymore..."
    $git.prune_remote_branches
    puts "Done!"
  end
end

desc 'List the merged branches'
command :merged do |c|
  c.action do |global_options, options, patterns|
    puts Code::Branch.merged
  end
end

pre do |global, command, options, args|
  $git = Code::Git.new
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
